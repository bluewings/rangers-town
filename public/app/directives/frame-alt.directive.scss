@charset "utf-8";

$frame-sizes: (sm: (frame-width: 740px, frame-height: 705px, frame-padding: 40px), md: (frame-width: 840px, frame-height: 705px, frame-padding: 40px), lg: (frame-width: 940px, frame-height: 705px, frame-padding: 40px), xl: (frame-width: 1040px, frame-height: 705px, frame-padding: 40px), xxl: (frame-width: 1140px, frame-height: 705px, frame-padding: 40px));

$player-sizes: (sm: (width: 84px), md: (width: 112px), lg: (width: 150px), xl: (width: 200px));

$player-indexes: 1 2 3 -3 -2 -1;

$player-layout: (7: (indexes: 1 2 3 -3 -2 -1),6: (indexes: 1 2 3 -2 -1), 5: (indexes: 1 2 -2 -1), 4: (indexes: 1 2 -1), 3: (indexes: 1 -1), 2: (indexes: 1));

@function player-position($frame-prop, $player-prop, $num-of-player, $player-index) {
    $frame-width: map-get($frame-prop, frame-width);
    $frame-height: map-get($frame-prop, frame-height);
    $frame-padding: map-get($frame-prop, frame-padding);
    $player-width: map-get($player-prop, width) * 1.7;
    $top: $frame-padding;
    $left: null;
    $opacity: 1;
    $n: $num-of-player - 1;
    $layout: map-get($player-layout, $num-of-player);
    @if $layout != null {
        $indexes: map-get($layout, indexes);
        $index: index($indexes, $player-index);
        $margin: ($frame-width - $frame-padding * 2 - $player-width * $n) / ($n - 1);
        $gap: $player-width + $margin;
        @if $num-of-player > 2 {
            @if $index != null {
                @if $num-of-player > 3 and ($index == 1 or $index == $num-of-player - 1) {
                    $top: $frame-padding * 3;
                }
                $left: $frame-padding + $player-width * 0.5 + $gap * ($index - 1);
            }
            @else {
                $position: player-position($frame-prop, $player-prop, $num-of-player + 1, $player-index);
                $top: map-get($position, top);
                $left: map-get($position, left);
            }
        }
        @else {
            @if $index != null {
                $left: 50%;
            }
            @else {
                $position: player-position($frame-prop, $player-prop, $num-of-player + 1, $player-index);
                $top: map-get($position, top);
                $left: map-get($position, left);
            }
        }
    }
    @return (top: $top, left: $left, opacity: $opacity);
}

@mixin player-position($frame-prop, $player-prop, $num-of-player, $player-index) {
    $position: player-position($frame-prop, $player-prop, $num-of-player, $player-index);
    $top: map-get($position, top);
    $left: map-get($position, left);
    $opacity: map-get($position, opacity);
    @if $left != null {
        top: round($top);
        left: round($left);
        @if $opacity == 0 {
            opacity: $opacity;
            pointer-events: none;
        }
    }
}

.frame {
    @each $frame-size, $frame-prop in $frame-sizes {
        &.frame-#{$frame-size} {
            position: relative;
            width: map-get($frame-prop, frame-width);
            height: map-get($frame-prop, frame-height);
            border: 1px dashed black;
            @for $num-of-player from 2 through 7 {
                &.frame-#{$num-of-player} {
                    .player {
                        position: absolute;
                        transition: top 1.75s cubic-bezier(.5, 0, 0.25, 1.5), left 1s cubic-bezier(.5, 0, 0.25, 1.5);
                        @each $player-size, $player-prop in $player-sizes {
                            &.player-#{$player-size} {
                                $player-width: map-get($player-prop, width) * 1.7;
                                margin-left: $player-width * -0.5;
                                @each $player-index in $player-indexes {
                                    &.player#{$player-index} {
                                        @include player-position($frame-prop, $player-prop, $num-of-player, $player-index);
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
    }
    .player {
        &.ng-enter {
            animation: bounceInDown 1s;
        }
        /*transition: left 3s linear !important;*/
        &.ng-leave {
            /*transition: left 3s linear !important;*/
            animation: bounceOutUp 1s;
        }
    }
}